● CSS 스타일 형식
  선택자 { 속성1 : 속성값1; 속성2 : 속성값2 }
  - 선택자 : 웹 문서에서 어느 부분에 스타일을 적용할지 알려주는 것, 스타일을 어느 태그에 적용할 것인지 알려줌
  - {} : 스타일 정보가 들어감

● CSS 소스 경량화 : CSS 소스는 네트워크를 이용해 파일로 내려받으므로 되도록이면 크기를 작게 하는 것이 좋음 (줄바꿈, 주석 최소화)
  >> css 소스 경량화 툴을 이용하여 줄임

● 스타일 시트
  1) 브라우저 기본 스타일 (웹 브라우저에 기본으로 만들어져 있음. <h1> </h1>,<p></p> 등..)
  2) 사용자 스타일 (사이트 제작자가 만듦)
    2-1) 인라인 스타일 : 태그에 style 속성을 사용해서 style="속성:속성값;" 형태로 사용
    <p style="color: blue;">안녕</p>

    2-2) 내부 스타일 시트 : 스타일을 여러 곳에 적용할 때 사용
    <head></head> 내부에 <style></style> 사이에서 작성

    2-3) 외부 스타일 시트(*.css 파일을 사용) : 여러 웹문서에 동일한 스타일을 적용할 때 사용 
    <link rel="stylesheet" href="외부 스타일 시트 파일 경로(*.css)">

 ● 선택자
  - 전체 선택자 : 웹 브라우저의 기본 스타일을 초기화할 때 사용, 웹 문서 전체에 마진과 패딩 여백을 0으로 지정
    * {"color:blue; 속성:값; ..."}

  - 타입 선택자 : 특정 태그를 사용한 모든 요소에 스타일을 적용
    태그명 {스타일 규칙} 
    p {
      font-style:italic;    >> p태그에 모두 적용 
    }
  - 클래스 선택자 : 같은 태그라도 일부는 다른 스타일을 적용
    .클래스명 { 스타일 규칙 } , 태그 내에 class="클래스명"

    .accent={
      border: 1px solid #000;  /* 클래스 스타일을 2개 이상 적용할 때에는 공백으로 구분해서 스타일 이름으로 적으면 됨. */
      padding: 5px;       /* 테두리와 내용 사이에 여백 */
    }

  - id 선택자 : 특정 부분에 스타일을 한 번만 적용 (문서 레이아웃, 웹 요소에 자바스크립트 프로그램을 사용하면서 요소를 구별할 때 사용)
    #아이디명 { 스타일 규칙 } , 태그 내에  id="아이디명"

  - 그룹 선택자 : 여러 타입 선택자에 같은 스타일 규칙을 사용
    선택자1, 선택자2 { 스타일 규칙 }
    h1, p {
      text-align: center;
    }

● 캐스케이딩 : 스타일 시트에서 우선순위가 위에서 아래로 적용
 - 스타일 우선순위 : 스타일 규칙의 중요도와 적용 범위에 따라 우선순위가 결정, 우선순위에 따라 위에서 아래로 스타일을 적용
    스타일 규칙의 중요도 : 사용자가 지정한 스타일 > 제작자의 스타일 > 웹 브라우저가 기본으로 정해 놓은 스타일 
    적용 범위 : !important > 인라인 스타일 > id 스타일 > 클래스 스타일 > 타입 스타일
    소스에서 나중에 작성한 스타일이 먼저 작성한 스타일을 덮어씀.

 - 스타일 상속 : 태그의 포함 관계에 따라 부모 요소의 스타일을 자식 요소로, 위에서 아래로 적용

 -----------------------------------------------------------------------------------------------------------------------------------------------------

● 글꼴 관련 스타일
  - font-family 속성 : 웹 문서에서 사용할 글꼴을 지정 (<body>, <p>, <hn> 태그처럼 텍스트를 사용하는 요소에서 사용)
      font-family:<글꼴이름> | [<글꼴이름>, <글꼴이름>]  body{font-family:"맑은 고딕",돋움,굴림} (자식요소까지 모두 적용)
      -> 글꼴이 사용자 시스템에 설치되어 있지 않다면 의도된 글꼴이 표시되지 않기에 2번째, 3번째 글꼴 지정

  - font-size 속성 : 글자 크기를 지정 (px,pt 등)
    font-size: <절대 크기>(브라우저에서 지정) | <상대 크기>(부모 요소의 글자 크기를 기준으로 상대적 조정) | <크기> | <백분율>(부모의)
    단위 : em(16px, 12pt), rem, ex, px, pt (음숫값은 사용 불가)
    키워드 : xx-small < x-small < small < medium < large < x-large < xx-large
  
  - font-style 속성 : 글자를 이탤릭체로 변경
    font-style : normal | italic | oblique

  - font-weight 속성 : 글자 굵기를 지정
    font-weight : normal(400) | bold(700) | bolder | lighter| 100 ~ 900
  
  - 웹 폰트 : 웹 문서를 작성할 때 글꼴 정보를 함께 저장 (07\webfont.html 참고)
    인터넷 사이트 제공 글꼴 : 링크해서 사용, 그렇지 않은 글꼴 : 직접 업로드 해서 사용
    컴퓨터에서 사용 글꼴(트루타입) : *.ttf
    웹에서 사용 글꼴 : EOT, WOFF, WOFF2 
    @font-face {
      font-family: <글꼴 이름>;
      src: <글꼴 파일>[<글꼴파일>, <글꼴파일>, ...]
    }
  
● 텍스트 스타일
  - color 속성 : 웹 문서에서 문단이나 제목 등의 텍스트에서 글자색을 바꿀 때 사용
    color: <색상( 색상 이름 || 16진수 || rgb || hsla )> 
    1) 16진수 : #000000 ~ #ffffff (검~흰), # 기호 다음에 6자리의 숫자로 표현(0 ~ f) 
       RRGGBB (00~ff) -> 두자리가 중복되면 "00f" 와 같이 표현 가능
    2) hsla : hue(색상), saturation(채도), lightness(명도), alpha(불투명도)
            color: hsla(0,100%,50%,0.5);
    3) rgba : 0 ~ 255 로 표시
            color: rgba(0,0,255,0.5); 

  - text-align 속성 : text-align: start | end | left(기본) | right | center | justify | match-parent
    1) start / end : 현재 텍스트 줄의 시작/끝 위치에 맞춰 문단 정렬
    2) justify : 양쪽에 맞추어 문단을 정렬
    3) match-parent : 부모 요소를 따라 문단을 정렬

  - line-height 속성 : 줄간격을 조절 -> 보통 글자크기의 1.5 ~ 2배로 설정
    ** 세로 정렬을 하고 싶을 때 line-height를 height와 같게 설정해주면 됨.
    p { font-size: 12px; line-height: 24px; || 2.0(배수); || 200%(백분율); }

  - text-decoration 속성 : 텍스트의 줄을 표시하거나 없앰 (하이퍼링크 밑줄을 없앰)
    <p style="text-decoration: none || underline || overline || line-through">하이퍼링크 밑줄</p>
    line-through: 취소선 표시

  - text-shadow 속성 : 텍스트에 그림자 효과를 추가 (양수:오른쪽,아래 음수:왼쪽,위)
    text-shadow: none || <가로 거리> <세로 거리> <번짐 정도> <색상>
  
  - text-transform : 영어 텍스트의 대소 문자를 변환
    text-transform: none | capitalize | uppercase | lowercase | full-width
    none: 줄을 표시하지 않음
    capitalize: 첫 번째 글자를 대문자로 변환
    uppercase: 모든 글자를 대문자로 변환
    lowercase: 모든 글자를 소문자로 변환
    full-width: 가능한 모든 문자를 전각문자로 변환(가로 세로 비율이 같음)
  
  - letter-spacing : 글자와 글자 사이의 간격을 조절, px, em, % 사용 (word-spacing : 단어와 단어 사이의 간격을 조절)
    letter-spacing: 0.2em;

● 목록 스타일
  - list-style-type 속성 : 불릿 모양과 번호 스타일을 지정
    list-style-type: none | disc(채운 원) | circle(빈 원) | square(채운 사각형) | decimal(숫자) | decimal-leading-zero(01..) |
                     lower-roman(i,ii..) | upper-roman(I,II..) | lower-alpha (lower-latin) | upper-alpha (upper-latin)

  - list-style-image 속성 : 불릿을 원하는 이미지로 바꿀 수 있음
    list-style-image: <url(이미지 파일 경로)> | none  (list-style-image: url('images/dot.png'))

  - list-style-position 속성: 불릿의 위치를 들여쓸 수 있음
    list-style-position: inside(안으로 들여씀) | outside(기본값);
  
  - list-style 속성: list-style-type, list-style-image, list-style-position 속성을 모두 사용할 수 있음
    list-style: none | lower-alpha inside ..

● 표 스타일
  - caption-side 속성 : 표 제목의 위치를 정해줌
    caption-side: top(기본값) | bottom(표 아래)
  
  - border 속성 : 표 바깥 테두리와 셀 테두리를 각각 지정하여 표 테두리를 그려줌
    table{
      caption-side: bottom;
      border: 1px solid black;
      border-collapse: collapse;
    }
    td, th{
      border: 1px dotted black;
      padding: 10px;
      text-align: center;
    }
  - border-spacing 속성 : 표와 셀에 따로 테두리를 지정하여 셀과 셀 사이에 여백이 발생시 여백을 지정
    border-spacing: 수평거리 수직거리 (두 값이 같다면 1개만 지정해도 됨)
  
  - border-collapse 속성 : <table> 태그와 <td> 태그에서 border 속성을 사용하면 셀 사이에 여백이 생겨 두줄로 표현되는 것을 조정
    border-collapse: collapse(하나로 표시) | seperate(기본값, 두 줄로 표시) -> <tabal>태그 내에서 사용

-----------------------------------------------------------------------------------------------------------------------------------------------------

● CSS 박스모델
  - 블록 레벨 요소 : 태그를 사용해 요소를 삽입했을 때 혼자 한 줄을 차지하는 것 (해당 요소의 너비가 100%)
   -> 블록 레벨 요소의 왼쪽이나 오른쪽에 다른 요소가 올 수 없음 (ex: <h1>, <div>, <p> 등)
  - 인라인 레벨 요소: 콘텐츠만큼만 영역을 차지. 한 줄에 여러 요소가 올 수 있음. (ex: <span>, <img>, <strong> 등)

  - 박스모델의 기본 구성
    : 웹 문서의 블록 레벨 요소는 모두 박스 형태 -> 박스 모델 요소
    1) 콘텐츠 영역 : 내용
    2) padding : 박스와 콘텐츠 영역 사이의 여백
    3) border : 박스의 테두리
    4) margin : 여러 박스 모델 사이의 여백
     -> 콘텐츠 영역 < padding < border < margin
  
  - width, height 속성 : 콘텐츠 영역의 크기를 지정
    width | height : <크기(px,em) - 고정> | <백분율(%) - 가변> | auto(기본값, 콘텐츠 양에 따라)>
  
  - box-sizing 속성 : 박스 모델의 크기를 계산
    box-sizing : border-box (테두리까지 포함한 너빗값 지정) | content-box (기본값, 콘텐츠 영역만 너빗값을 지정)

  - box-shadow 속성 : 박스 모델에 그림자 효과를 줌, 이미지 또는 <div>와 같이 전체 영역에 지정하여 넣을 수 있음
    box-shadow: <수평 거리> <수직 거리> (<흐림 정도> <번짐 정도> <색상> inset) -> 옵션
    <수평 거리> : 양수는 오른쪽, 음수는 왼쪽으로 그림자를 만듦
    <수직 거리> : 양수는 아래, 음수는 위로 그림자를 만듦
    <흐림 정도> : 기본값은 0으로 진한 그림자를 표시, 양수이며 값이 커질수록 부드러운 그림자
    <번짐 정도> : 양수값 - 모든 방향으로 그림자가 퍼짐, 음수값 - 모든 방향으로 그림자가 축소
    <색상> : 기본값은 검정으로 공백을 기준으로 여러 색상 지정 가능
    inset : 안쪽 그림자로 그림

-----------------------------------------------------------------------------------------------------------------------------------------------------

● 테두리 스타일 지정하기
  - 박스 모델  방향 : top -> right -> bottom -> left

  - border-style 속성 : 테두리 스타일을 지정
    none : 기본값, 테두리가 없어 화면에 표시 되지 않는다.
    hidden : 테두리를 감춤, 표에서 border-collapse 경우 다른 테두리도 표시되지 않음
    solid : 테두리를 실선으로 표시
    dotted : 테두리를 점선으로 표시
    dashed : 테두리를 짧은 직선으로 표시
    double : 테두리를 이중선으로 표시, 두 선 사이의 간격이 border-width 값
    groove : 테두리를 창에 조각한 것처럼 표시, 홈이 파인듯
    inset : 표에서 border-collapse : seperate 경우 전체 박스 테두리가 창에 박혀 있듯이 표현, collapse일 경우 groove랑 똑같이 표시
    outset : 표에서 border-collapse : seperate 경우 전체 박스 테두리가 창에서 튀어나온듯이 표현, collapse일 경우 ridge와 똑같이 표시
    ridge : 테두리를 창에서 튀어나온 것처럼 표시

  - border-width 속성 : 테두리 두께를 지정
    border-width: <크기> | thin | medium | thick
    ** 테두리 두께를 4개 방향 모두 다르게 지정하고 싶다면 
      1) border-top-width, border-right-width ... 각각 지정
      2) 값을 2개 지정 border-width: thick thin (top,bottom : thick / right,left: thin)
      3) 값을 3개 지정 border-width: thick thin thin (top,right,bottom 값, left값은 right값과 같음)

  - border-color 속성 : 테두리 색상을 지정
    border-color: <색상>
    ** 테두리 색상을 4개방향 모두 다르게 지정하고 싶다면
      1) border-top-color, border-right-color ... 각각 지정
      2) border-color : red green blue pink;

  - border 속성 : 테두리 스타일, 두께, 색상을 묶어 지정
    4개 방향 테두리 스타일을 다르게 지정하고 싶다면 : border-top, border-right ... 각각 지정
    
  - border-radius 속성 : 둥근 테두리를 만듦
    border-radius: <반지름 크기 px,em> | <백분율 %>
    ** 이미지의 width값과 height값을 같게 설정한 후 백분율 50% 때리면 원이 됨
    ** 테두리의 4개 방향 모두 다르게 지정하고 싶다면 border-top-left-radius, border-top-right-radius ... 각각 지정
    ** 꼭짓점을 타원으로 만들기 - border-radius: <가로 반지름> / <세로 반지름>;
       -> border-top-left-radius : <가로반지름> <세로반지름>; 
       (특정한 꼭짓점만 타원 형태로 만들겠다면 슬래시 없이 가로 반지름과 세로 반지름을 지정)

● 여백을 조절하는 속성
  - margin과 padding의 차이
    margin : (테두리 밖) 두 박스 모델 사이의 여백
    padding : (테두리 내부) 한 박스 모델에서 테두리와 내용 사이의 여백

  - margin 속성 : 요소 주변의 여백을 설정, 요소와 요소 사이의 간격을 조절
    margin: <크기 px,em> | <백분율 %> | auto(display 속성에서 지정한 값)
    ** margin-top, margin-right ... 각각 지정 가능
    ** margin: 12px 20px 25px; -> left:20px

  - 웹 문서의 내용을 화면 중앙에 배치
    1) 배치할 요소의 너비값이 정해져 있어야 함 (width값 설정)
    2) margin-right, margin-left 속성값을 auto로 설정 
    -> 웹 브라우저 화면의 너비에서 요소 너빗값을 뺀 나머지 영역을 좌우 마진으로 자동 계산

  - margin 중첩 : margin이 상,하로 겹쳤을 때 더 큰 margin 1개만 적용 
                좌,우로 겹쳤을 때 두 개의 margin 모두 반영됨.

  - padding 속성 : 콘텐츠와 테두리 사이의 여백을 설정, margin과 설정방법 같음
    padding: <크기 px,em> | <백분율 %> | auto
    ** padding-top, padding-right ... 각각 지정 가능

● 웹 문서의 레이아웃 만들기
  - display 속성 : 블록 레벨 요소(수직)와 인라인 레벨 요소(수평)를 서로 바꿔서 사용할 수 있음
                   웹 문서의 내비게이션(메뉴)을 만들면서 메뉴 항목을 가로로 배치할 때 많이 사용하며 이미지를 표 형태로 배치할 수 있음
                   -> 리스트를 수평으로 만듦
                  block : 인라인 레벨 요소를 블록 레벨 요소로 만듦
                  inline : 블록 레별 요소를 인라인 레벨 요소로 만듦
                  inline-block : 인라인 레벨 요소와 블록 레벨 요소의 속성을 모두 가지고 있으며 마진과 패딩을 지정할 수 있음
                  none : 해당 요소를 화면에 표시하지 않음

  - float 속성 : 블록 레벨 요소와 이미지를 함께 사용하고 싶을 때, 왼쪽이나 오른쪽으로 배치함 
    float: left | right | none(기본값) -> margin-right 나 margin-left 를 함께 사용

  - clear 속성 : float 속성을 해제
    clear: left | right | both(flat:left와 right를 모두 해제)
    ** 수평 내비게이션을 만들 시 display:inline-block 과 flat:left 차이
      - display:inline-block :가로로 배치하면서도 기본 margin과 padding을 가짐
      - float:left : 기본 margin과 padding이 없기에 margin과 padding을 따로 지정

● 웹 요소의 위치 지정하기
 - top, right, bottom, left 속성 : 기준 위치와 요소 사이에 좌,우,상,하 방향으로 얼마나 떨어져 있는지 지정
    position:absolute;
    right:100px;

  - position 속성 : 배치 방법을 지정 (텍스트나 이미지 요소를 나란히 배치할 수 있으며 원하는 위치 지정 가능)
    static : 문서의 흐름에 맞춰 배치 (기본값)
    relative : 위칫값을 지정할 수 있음
    absolute : relative 값을 사용한 요소(부모 요소)를 기준으로 위치를 지정해 배치, 없으면 기본값으로 배치
    fixed : 브라우저 창을 기준으로 위치를 지정해 배치 (스크롤해도 항상 같은 위치에 나타남)

-----------------------------------------------------------------------------------------------------------------------------------------------------

● 배경색과 배경 범위 지정
  - background-color 속성 : 배경색을 지정
    background-color : #008000 | rgba(0,128,0,0.5) | green
    16진수 : 색상을 세밀하게 조절, rgba : 투명도 함께 조절
  
  - background-clip 속성 : 박스 모델 관점에서 배경의 적용 범위를 조절   09/bg-clip.html 참고
    background-clip : content-box | padding-box | border-box

● 배경 이미지 지정
  - background-image 속성 : 웹 요소에 배경 이미지 삽입
    background-image: url('이미지 파일 경로') -> *.jpg, *.gif, *.png 형식 / 절대 경로, 상대 경로 사용 가능
    ** 요소보다 이미지가 작으면 이미지가 반복 되어 요소의 배경을 채움
  
  - background-repeat 속성 : 배경이미지의 반복 방법을 지정
    background-repeat: repeat(기본값, 브라우저 화면이 가득찰 때까지 반복) | repeat-x | repeat-y | no-repeat(한 번만 표시)
  
  - background-position 속성 : 배경이미지의 위치를 조절        
    background-position: <수평 위치> <수직 위치>;
    수평 위치 : left | right | center | <백분율> | 길이값 (px)
    수직 위치 : top | bottom | center | <백분율> | 길이값 (px)
    ** 속성값을 한 개만 지정한다면 해당 값은 수평 위칫값이며 수직 위칫값은 50% | center

  - background-orgin 속성 : 박스 모델 관점에서 배경 이미지의 적용 범위를 조절
    background-orgin: content-box(기본값) | padding-box | margin-box

  - background-attachment 속성 : 스크롤을 내려도 배경 이미지가 고정
    background-attachment: scroll(기본값) | fixed

  - background 속성 : 배경 이미지 속성을  모두 모아 사용할 수 있음.
    body {
      background-image: url('images/bg4.png');
      background-repeat: no-repeat;
      background-orgin: center bottom;
      background-attachment: fixed;
    }
    = body {background: url('images/bg4.png') no-repeat center bottom fixed;}

  - background-size 속성 : 배경 이미지 크기를 조절
    background-size: auto(기본값) | contain | cover | <크기> | <백분율>
    auto : 원래 배경 이미지 크기
    contain : 요소 안에 배경 이미지가 다 들어오도록 이미지를 확대, 축소
    cover : 배경 이미지로 요소를 모두 덮도록 이미지를 확대, 축소
    <크기> : 너비, 높이 지정 (하나만 지정할 시 너비값이며 높이는 자동)
    <백분율> : 배경 이미지가 들어갈 요소의 크기를 기준으로 값을 백분율로 지정

● 그라데이션 효과로 배경 꾸미기
  - linear-gradient 속성(선형 그라데이션) : 색상이 수직, 수평, 대각선 방향으로 일정하게 변화
    linear-gradient(to <방향> | <각도>, <색상 중지점>, [<색상 중지점>, ...]);
    1) 방향 : 수평(left, right), 수직(top, bottom) ex: to right bottom
    2) 각도 : deg 단위 사용 ex: 45deg
    3) 색상 중지점 : 2가지 색 이상의 선형그라데이션에서 색상을 바뀌는 부분
      -> 색상과 색상 중지점 위치 지정 가능(rgba)
      
  - radial-gradient 속성(원형 그라데이션) : 원의 중심에서부터 동심원을 그리며 바깥 방향으로 색상이 바뀜
    radial-gradient(<모양> <크기> at <위치>, <색상 중지점>, [<색상 중지점>,...])
    1) 모양 : circle(원형) | ellipse(타원형)
    2) 크기 : closet-side | closet-corner | farthest-side | farthest-corner(기본값)
    3) 위치 : 그라데이션이 시작하는 원의 중심 위치를 지정
      left | center | right, top | center | bottom, 백분율
    4) 색상 중지점 : 2가지 색 이상의 선형그라데이션에서 색상을 바꾸는 부분
      -> 색상과 색상 중지점 위치 지정 가능

  - repeating-linear-gradient : 선형 그라데이션 반복
  - repeating-radial-gradient : 원형 그라데이션 반복

-----------------------------------------------------------------------------------------------------------------------------------------------------

● 연결 선택자
  - 하위 선택자 : 부모 요소에 포함된 하위 요소를 모두 선택 (자식요소, 손자요소 ...)
    section p {color: blue;} -> section : 상위요소, p : 하위 요소

  - 자식 선택자 : 하위 선택자와 다르게 자식 요소에만 스타일을 적용하는 선택자 (손자요소에는 적용 안 됨)
    section > p {color: blue;} -> section : 부모요소, p : 자식요소
  
  ** 웹 문서에서 부모 요소가 같을 경우 형제 관계라 하고, 형제 관계에서 먼저 나오는 요소는 형 요소, 나중에 나오는 요소는 동생 요소 

  - 인접 형제 선택자 : 형제 요소 중에서 첫 번째 동생 요소만 선택하는 것
    h1 + p {color: blue;} -> h1 요소와 형제인 p 요소 중에서 첫 번째 p요소만 선택하여 글자에 파란색을 적용

  - 형제 선택자 : 모든 형제 요소의 스타일을 정의
    h1 ~ p {color: blue;} -> h1 요소 뒤에 오는 모든 형제 p요소의 글자에 파란색을 적용

● 연결 선택자
  - [속성] 선택자 : 해당 속성이 있는 요소를 선택
    a[href] {...} -> a 요소 중 href 요소에 스타일 적용

  - [속성 = 속성값] 선택자 : 지정한 속성값이 있는 요소를 선택
    a[href = _blank] {...} -> a요소 중에서 target 속성값이 '_blank'인 것만 선택

  - [속성 ~= 값] 선택자 : 지정한 속성값이 포함된 요소를 선택 (정확한 값만 찾음)
    [class ~= button] {...} -> 하나의 요소에 클래스 스타일을 여러 개 적용할 수 있는데, 그 중에 정확히 button 스타일이 있는 요소

  - [속성 |= 값] 선택자 : 지정한 속성값이 포함된 요소를 선택 (정확한 값 + 하이픈 포함)
    a[title |= us] {...} -> a요소의 title 속성값에 us가 있거나 -us- 하이픈으로 연결된 속성값을 선택

  - [속성 ^= 값] 선택자 : 지정한 속성값으로 시작하는 요소를 선택
    a[title ^= eng] {...} _> a요소의 title 속성값이 eng로 시작하는 요소를 선택

  - [속성 $= 값] 선택자 : 지정한 속성값으로 끝나는 요소를 선택
    [href $= xls] {...} -> 링크한 파일 이름의 마지막 단어가 xls인 요소를 선택

  - [속성 *= 값] 선택자 : 지정한 속성값의 일부가 일치하는 요소를 선택
    [href *= w3] {...} -> href 속성값 중에 'w3'가 포함된 요소를 선택

● 가상 클래스와 가상 요소
  - 가상 클래스 : 사용자 동작에 반응 (사용자가 마우스 포인터를 올려놓거나 웹 요소를 클릭하거나 ...)
    ** :link -> :visited -> :hover -> :active 순으로 적용해야 함
    1) :link 가상 클래스 선택자 : 방문하지 않은 링크에 스타일을 적용
    2) :visited 가상 클래스 선택자 : 방문한 링크에 스타일을 적용
    3) :hover 가상 클래스 선택자 : 특정 요소에 마우스 포인터를 올려놓으면 스타일을 적용
    4) :active 가상 클래스 선택자 : 웹 요소의 링크나 이미지 등을 활성화했을 때, 즉 클릭하는 순간 스타일을 적용
    5) :focus 가상 클래스 선택자 : 웹 요소에 포커즈가 맞추어졌을 때 스타일을 적용 (텍스트 필드 안에 마우스 포인터를 올려놓을 때)

  - 요소에 따른 가상 클래스 
    1) :target 가상클래스 선택자 : 앵커에 연결된 부분(목적지)에 스타일을 적용
        ** 같은 문서 안에서 다른 위치로 이동시 앵커를 사용
        #intro:target{...} -> 앵커를 사용해 intro 위치로 링크할 경우 intro 스타일을 변경
    2) :enabled, :disenabled 가상 클래스 선택자: 요소가 사용할 수 있는 상태 / 사용할 수 없는 상태일 때 스타일을 적용
       #textarea:disabled{...} -> 사용자가 입력할 수 없도록
    3) :checked 가상 클래스 선택자 : 선택한 항목의 스타일을 적용 (radio | checkbox)
       #signup input:checked + label {...} -> input 요소에 checked 속성이 추가되었을 때 label 요소의 스타일
      (input과 label 태그가 형제 관계이므로 + 사용)
    4) :not 가상 클래스 선택자 : 특정 요소를 제외하고 스타일을 적용
      #signup input:not([type=radio]) -> radio 필드가 아닌 필드에 스타일 적용 (괄호 안에 있는 요소를 제외)
    
  - 구조 가상 클래스 : 특정 위치에 있는 요소를 찾아 스타일을 적용
    1) 특정 위치의 자식 요소 선택: ...
    2) 수식을 사용해 위치 정하기
      last--child

  - 가상 요소 : 문서 안에서 특정 부분에 스타일을 지정하기 위해 가상으로 요소를 만들어 추가
    1) ::first-line , ::first-letter 요소 : 지정한 요소의 첫 번째 줄이나 첫 번째 글자에 스타일을 적용 (첫 번째 글자가 첫 번째 줄에 있어야 함)
    2) ::before, ::after 요소 : 지정한 요소의 내용 앞뒤에 콘텐츠를 추가
       li.new::after

-----------------------------------------------------------------------------------------------------------------------------------------------------
트랜지션과 애니메이션

● 변형 알아보기
    - transform 속성 : CSS에서 변형을 적용함
      transform: 변형 함수
    
    - 2차원 변형 함수와 3차원 변형 함수
      1) 2차원 변형 함수 : 웹 요소를 평면에서 변형 (수평 | 수직)
        translate(tx,ty) : tx,ty만큼 이동
        translateX(tx) : tx만큼 이동
        translateY(ty) : ty만큼 이동
        scale(sx,sy) : sx,sy만큼 확대/축소
        scaleX(sx) : sx만큼 확대/축소
        scaleY(sy) : sy만큼 확대/축소
        rotate(각도) : 각도만큼 회전
        skew(ax,ay) : ax,ay 각도만큼 왜곡
        skewX(ax) : ax 각도만큼 왜곡
        skewY(ay) : ay 각도만큼 왜곡
      2) 3차원 변형 함수 : 웹 요소를 x,y,z축에서 변형
        translate3d(tx,ty,tz) : tx,ty,tz만큼 이동
        translateZ(tz) : tz만큼 이동
        scale3d(sx,sy,sz) : sx,sy,sz만큼 확대/축소
        scaleZ(sz) : sz만큼 확대/축소
        rotate(rx,ry,각도) : 각도만큼 회전
        rotate3d(rx,ry,rz,각도) : 각도만큼 회전
        rotateX(각도) : 각도만큼 x축으로 회전
        rotateY(각도) : 각도만큼 y축으로 회전
        rotateZ(각도) : 각도만큼 Z축으로 회전
        perspective(길이) : 입체적으로 보일 수 있도록 깊잇값을 지정

    - translate() 함수 : 웹 요소를 이동
      transform : translate(tx,ty)
      transform : translate3d(tx,ty,tz)
      transform : translateX(tx)
      transform : translateY(ty)
      transform : translateZ(tz)

    - scale() 함수 : 요소를 확대/축소하는 함수 (값이 1보다 크면 확대, 1보다 작으면 축소)
      transform : scale(sx,sy)
      transform : scale3d(sx,sy,sz)
      transform : scaleX(sx)
      transform : scaleY(sy)
      transform : scaleZ(sz)

    - rotate() 함수 : 요소를 회전
      transform : rotate(각도) => 2차원 변형(단위: deg | rad, 양수는 오른쪽, 음수는 왼쪽으로 회전) 
      ** 3차원 변형에서 perspective 속성을 사용하여 원래 있던 위치에서 사용자가 있는 방향이나 혹은 반대 방향으로 잡아당기거나 밀어냄
        -> 변형하는 요소의 부모 요소에 정의해야함
      transform : rotate(rx,ry,각도)
      transform : rotate3d(rx,ry,rz,각도)
      transform : rotateX(각도) 위,아래
      transform : rotateY(각도) 좌, 우
      transform : rotateZ(각도) 시계방향, 반시계방향

    - skew() 함수 : 요소를 비틀어 왜곡
      transform : skew(x각도,y각도)
      transform : skewX(x각도)
      transform : skewY(y각도)

● 트랜지션 알아보기
  - 트랜지션 : 하나의 스타일을 완전히 다른 스타일로 바꿈 (요소의 배경색을 바꾸거나 도형 테두리를 변경)
  - 트랜지션 속성
    1) transition-property : 트랜지션 대상을 지정
       transition-property: all(기본값, 모든 요소) | none | <속성 이름> (ex:width,height 등)
    2) transition-duration : 트랜지션 실행시간을 지정
       transition-duration: <시간 ms,s> (속성이 여러 개라면 시간도 여러 개 설정 가능)
    3) transition-timing-function : 트랜지션 실행 형태를 지정
       transition-timing-function : ease (기본값) | linear | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n)
       ease : 기본값, 처음에는 천천히 시작하고 점점 빨라지다가 마지막에는 천천히 끝냄
       linear : 시작부터 끝까지 똑같은 속도로 진행
       ease-in : 느리게 시작
       ease-out : 느리게 끝냄
       ease-in-out : 느리게 시작하고 느리게 끝냄
       cubic-bezier(n,n,n,n) : 배지에 함수를 정의해서 사용(n값은 0~1)
    4) transition-delay : 트랜지션 지연 시간을 지정
       transition-delay : <시간 ms,s> (기본값:0)
    5) transition : transition 속성을 한꺼번에 지정
       ** 시간값이 2개 있다면 앞에 오는 시간값을 transition-duration 뒤에 오는 시간값을 transition-delay

    
● 애니메이션 알아보기
  - css 애니메이션에서 사용하는 속성
    ** keyframe : 애니메이션 속성은 특정 지점에서 스타일을 바꾸는데 이 바뀌는 지점을 키프레임이라 한다.
    ** 애니메이션을 재실행하기 위해선 새로고침(F5) 해야 한다.
    1) @keyframes 속성 : 애니메이션 시작과 끝을 비롯하여 상태가 바뀌는 지점을 설정
       @keyframes <animation-name> {
        from {}
        50% {}
        to {}
        <선택자> {<스타일>}
       }
       선택자 : 스타일 속성값이 바뀌는 지점(시작-끝:from,to, 중간:50%)
    2) animation-name : 애니메이션을 여러 개 정의 할 수 있으므로 이름을 이용해 애니메이션을 구별
       animation-name: <키프레임 이름> | none
    3) animation-duration : 애니메이션 실행 시간을 지정
       animation-duration : <시간 ms,s> (기본값은 0으로 설정하지 않으면 애니메이션은 실행되지 않음)
    4) animation-direction : 애니메이션은 기본적으로 keyframes에서 정의한 from에서 to순서로 진행하는데 진행 방향을 바꿀 수 있음
       animation-direction : normal | reverse | alternate | alternate-reverse
       normal : 기본값, 애니메이션을 from에서 to로 진행
       reverse : 애니메이션을 to에서 from으로 진행
       alternate : 홀수번째는 normal로, 짝수번째 reverse로 진행
       alternate-reverse : 홀수번째는 reverse로 짝수번째는 normal로
    5) animation-iteration-count : 반복 횟수를 지정
       animation-iteration-count: <숫자> | infinite
    6) animation-timing-function : 애니메이션의 시작,중간,끝에서 속도를 지정하여 전체 속도 곡선을 만듦
       aniation-timing-function : linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n)
    7) animation : 애니메이션 속성을 한꺼번에 표기
       ** animation-duration 속성을 반드시 지정해야함
    
-----------------------------------------------------------------------------------------------------------------------------------------------------

● 반응형 웹 알아보기
  - 반응형 웹 디자인 : 기존 웹 사이트의 내용을 그대로 유지하면서 다양한 화면 크기에 맞게 표시

  - viewport : 스마트폰 화면에서 실제 내용이 표시되는 영역, 뷰포트를 지정하여 접속한 기기 화면에 맞추어 확대하거나 축소 표현 가능
  <-> 웹키트 (PC화면과 모바일 화면에서 표시되는 픽셀의 차이로 인해 차이 발생)

  - viewport 지정 : <meta name="viewport" content="속성1=값1, 속성2=값2," ... >
    1) width : device-width | 크기 (브라우저 기본값)      
    2) height : device-height | 크기 (브라우저 기본값)
    3) user-scalable : 확대/축소 가능 여부 (yes(기본값) | no)
       -> yes는 1로, device-width와 device-height값은 10으로 간주
       initial-scale : 초기 확대/축소 값 (1(기본값)~10)
       ex) <meta name="viewport" content="width-device, initial-scale=1" 
       : 웹 페이지 뷰포트의 너비를 스마트폰 화면 너비에 맞추고 초기 화면 배율을 1로 설정

  - vieport 단위
    1) 1vw: viewport width의 1%
    2) 1vh: viewport height의 1%
    3) 1vmin: viewport width, height 중 작은 값의 1%
    4) 1vmax: viewport width, height 중 큰 값의 1%
    -> 화면을 돌리는 경우 vw값과 vh값 교환

● 미디어 쿼리 알아보기
  - 미디어 쿼리 : 사이트에 접속하는 기기에 따라 특정한 CSS스타일을 사용

  - 미디어 쿼리 구문 : <style></style> 사이에 사용
    @media [only | not] 미디어 유형 [and 조건] * [and 조건]
    only : 미디어 쿼리를 지원하지 않는 웹 브라우저에서는 미디어 쿼리를 무시하고 실행하지 않음
    not : not 다음에 지정하는 미디어 유형을 제외 (not tv : TV를 제외한 미디어 유형에 적용)
    and : 조건을 여러 개 연결해서 추가 
    ex) @media screen and (min-width:768px) and (max-width:1439px){...} 
        : 미디어 유형이 screen이면서 최소 너비가 768px이고 최대 너비가 1439px일 경우 {...} 적용

  - 미디어 쿼리 유형 종류
    all : 모든 미디어 유형에 적용
    print : 인쇄장치에 적용
    screen : 컴퓨터, 스마트폰 스크린에 적용
    tv : tv에 적용 
    aural : 음성 합성 장치에 적용
    braille : 점자 표시 장치에 적용
    handheld : 패드처럼 손에 들고 다니는 장치에 적용
    projection : 프로젝터에 적용
    tty : 디스플레이 기능이 제한된 장치에 적용(px단위 사용불가)
    embossed : 점자 프린터에 적용

  - 웹 문서의 width와 height 속성 : 뷰포트의 너비와 높이를 미디어 쿼리 조건으로 적용
    width, height : 웹 페이지의 너비와 높이를 지정
    min-width, min-height : 웹 페이지의 최소 너비, 최소 높이를 지정
    max-width, max-height : 웹 페이지의 최대 너비, 최대 높이를 지정

  - 단말기의 width와 height 속성
    device-width, device-height : 단말기의 너비와 높이를 지정
    min-device-width, min-device-height : 단말기의 최소 너비와 높이를 지정
    max-device-width, max-device-height : 단말기의 최대 너비와 높이를 지정

  - 화면 회전 속성
    orientation: portrait(세로) | landscape(가로)(기본값)

  - 미디어 쿼리 중단점 : 화면 크기(기기)에 따라 서로 다른 CSS를 적용할 분기점
    -> 보통 모바일(기준), 태블릿, 데스크톱 로 구분

  - 미디어 쿼리 적용
    1) 외부 CSS파일로 연결하는 방법
      1-1) <link rel="stylesheet" media="미디어 쿼리 조건" href="css 파일 경로"> (주로 사용)
           ex: <link rel="stylesheet" media="print" href="css/print.css">
      2-2) @import url("css파일경로") 미디어 쿼리 조건
            ex: @import url("css/tablet.css") only screen and (min-width: 321px) and (max-width:768px);
    2) 웹 문서에 직접 정의하는 방법
       2-1) <style media="screen and (max-width: 320px) "<조건>> {
              <스타일 규칙>
              body {
                background-color : orange;
              }
            }
            </style>
        2-2) <style>
               @media screen and (max-width: 320px)<조건> {
                <스타일 규칙>
                body {
                  background-color : orange;
                }
               }
             </style>

● 그리드 레이아웃 알아보기
  - 그리드 레이아웃 : 웹 사이트를 여러 개의 column으로 나눈 후 메뉴, 본문 등 웹 요소를 화면에 맞게 배치
  - 그리드 레이아웃 만드는 법
    1) 플렉스 박스 레이아웃
    2) CSS 그리드 레이아웃
